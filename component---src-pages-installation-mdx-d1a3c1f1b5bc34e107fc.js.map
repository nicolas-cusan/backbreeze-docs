{"version":3,"sources":["webpack:///./src/pages/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","children","title","subline","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,cAAC,IAAD,CAAWC,MAAM,eAAeC,QAAQ,0CACzCF,IAGU,SAASG,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACN,EAAD,iBAAeD,EAAiBO,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,yDAAsC,iCAAGC,WAAW,KAAQ,CACxD,KAAQ,2BAD0B,QAAtC,2EAE6F,iCAAGA,WAAW,KAAQ,CAC/G,KAAQ,sCACP,4BAAYA,WAAW,KAAvB,cAJL,wDAIuH,iCAAGA,WAAW,KAAQ,CACzI,KAAQ,kCAD2G,gBAJvH,4BAOA,8HAA2G,iCAAGA,WAAW,KAAQ,CAC7H,KAAQ,mDAD+F,WAA3G,KAE0B,iCAAGA,WAAW,KAAQ,CAC5C,KAAQ,4CADc,QAF1B,KAIuB,iCAAGA,WAAW,KAAQ,CACzC,KAAQ,mCADW,UAJvB,yBAOA,gGAA6E,4BAAYA,WAAW,KAAvB,aAA7E,mEACA,8EAA2D,iCAAGA,WAAW,KAAQ,CAC7E,KAAQ,6DAD+C,sBAA3D,iFAGA,mBAAQ,CACN,GAAM,wBADR,wBAGA,wDAAqC,iCAAGA,WAAW,KAAQ,CACvD,KAAQ,6CADyB,OAArC,KAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sCAIL,sNACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yKAWL,mBAAQ,CACN,GAAM,6BADR,6BAGA,iEAA8C,4BAAYA,WAAW,KAAvB,gBAA9C,QAA+G,4BAAYA,WAAW,KAAvB,mBAA/G,kGAA6Q,wBAAQA,WAAW,KAAnB,UAA7Q,6BAAqV,4BAAYA,WAAW,KAAvB,gBAArV,2CAAyb,4BAAYA,WAAW,KAAvB,mBAAzb,4DACA,8EAA2D,4BAAYA,WAAW,KAAvB,cAA3D,4GAA8N,iCAAGA,WAAW,KAAQ,CAChP,KAAQ,oBADkN,QAA9N,MAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qjBAsBL,mBAAQ,CACN,GAAM,gCADR,gCAGA,+aAA4Z,iCAAGA,WAAW,KAAQ,CAC9a,KAAQ,0BADgZ,QAA5Z,MAOJJ,EAAWK,gBAAiB","file":"component---src-pages-installation-mdx-d1a3c1f1b5bc34e107fc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MdxLayout from 'components/mdx-layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <MdxLayout title=\"Installation\" subline=\"Using Backbreeze in your Sass project.\">\n    {children}\n  </MdxLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`There are multiple ways to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/\"\n      }}>{`Sass`}</a>{` and multiple Sass versions. All Testing for this library is done using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sass/node-sass\"\n      }}><inlineCode parentName=\"a\">{`node-sass`}</inlineCode></a>{`. There are some recommendations you can find on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/install\"\n      }}>{`Sass website`}</a>{` on how to install Sass.`}</p>\n    <p>{`A common way to include Sass processing in your project is to use a build tool or task runner like: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/webpack-contrib/sass-loader\"\n      }}>{`Webpack`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/gulp-sass\"\n      }}>{`Gulp`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://parceljs.org/scss.html\"\n      }}>{`Parcel`}</a>{` or just npm scripts.`}</p>\n    <p>{`This guide assumes that you have a running Sass setup and are using a `}<inlineCode parentName=\"p\">{`main.scss`}</inlineCode>{` file (name is not relevant) to include all your Sass partials.`}</p>\n    <p>{`NOTE: Backbreeze is not (yet) written using the new `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/blog/the-module-system-is-launched\"\n      }}>{`sass module system`}</a>{` to be more compatible with older codebases. This might change in the future.`}</p>\n    <h2 {...{\n      \"id\": \"installation-via-npm\"\n    }}>{`Installation via NPM`}</h2>\n    <p>{`Backbreeze is distributed via `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/backbreeze\"\n      }}>{`npm`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npm install --save backbreeze\n`}</code></pre>\n    <p>{`Alternatively you can clone the git repository. And copy the files to some location in your project. This approach is not recommended as you will not have automatic updates and bug fixes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Clone from GitHub\n$ git clone https://github.com/nicolas-cusan/backbreeze.git\n\n# Go into directory\n$ cd backbreeze\n\n# Remove the git folder\n$ rm -rf .git\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"including-in-your-project\"\n    }}>{`Including in your project`}</h2>\n    <p>{`Backbreeze provides two Sass partials: `}<inlineCode parentName=\"p\">{`_config.scss`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`_utilities.scss`}</inlineCode>{`. Due to the way default variables work in Sass you need to overwrite any Backbreeze variables `}<strong parentName=\"p\">{`before`}</strong>{` including the Backbreeze `}<inlineCode parentName=\"p\">{`_config.scss`}</inlineCode>{` file. It is recommended to include the `}<inlineCode parentName=\"p\">{`_utilities.scss`}</inlineCode>{` partial last to enable overwriting of any other styles.`}</p>\n    <p>{`To keep things tidy it is also recomended to have a `}<inlineCode parentName=\"p\">{`_vars.scss`}</inlineCode>{` (name is not relevant) partial to hold your Backbreeze configuration (Learn how to configure Backbreeze `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/\"\n      }}>{`here`}</a>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// main.scss\n\n// Project variables and Backbreeze configuration\n@include 'vars';\n\n// Backbreeze \\`_config.scss\\` (file path might vary depending on your setup)\n@include 'path/to/node_modules/backbreeze/src/config';\n\n// Reset stylesheet\n@include 'path/to/node_modules/destyle.css';\n\n// Custom project styles\n@include 'my-include';\n@include 'my-other-include';\n// ....\n\n// Backbreeze \\`_utilities.scss\\` last to overwrite any other styles\n// (file path might vary depending on your setup)\n@include 'path/to/node_modules/backbreeze/src/utilities';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-ways-to-use-backbreeze\"\n    }}>{`Other ways to use Backbreeze`}</h2>\n    <p>{`The Backbreeze npm package includes a compiled CSS version of the library with the default values. However as Backbreeze does not provide many default values it is not recommended to use this version. In addition to that Backbreeze generates a lot of classes so file size might be an issue. It is highly recommended to remove unused classes from your code base for production, you can learn more about it `}<a parentName=\"p\" {...{\n        \"href\": \"/using-in-production/\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}