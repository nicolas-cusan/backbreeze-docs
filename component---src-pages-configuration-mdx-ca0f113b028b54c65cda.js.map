{"version":3,"sources":["webpack:///./src/pages/configuration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","children","title","subline","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-configuration-mdx-ca0f113b028b54c65cda.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MdxLayout from 'components/mdx-layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <MdxLayout title=\"Configuration\" subline=\"Create your own style system via configuration.\">\n    {children}\n  </MdxLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"sass-default-variables\"\n    }}>{`Sass `}<inlineCode parentName=\"h2\">{`!default`}</inlineCode>{` variables`}</h2>\n    <p>{`In Sass variables can be flagged as `}<inlineCode parentName=\"p\">{`!default`}</inlineCode>{`. That means that if another variable with the same name is defined in the scope of the project the `}<inlineCode parentName=\"p\">{`!default`}</inlineCode>{` variable will be overwritten (learn more about it `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/variables#default-values\"\n      }}>{`here`}</a>{`).`}</p>\n    <p>{`Backbreeze's configuration API is based on this principle. To configure a Backbreeze you need to overwitte it by creating a variable with the same name in your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// project config\n\n// This declaration will overwritte each instance\n// of the \\`!default\\` $bb-colors variable\n\n$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'primary': #006cd6,\n  'accent': #f8c326,\n  'danger': #cb2431,\n  'current': currentColor,\n);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// bacbreeze config default\n\n// Default value\n\n$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'current': currentColor,\n) !default;\n`}</code></pre>\n    <p>{`Due to the way default variables work in Sass you need to overwrite any Backbreeze variables `}<strong parentName=\"p\">{`before`}</strong>{` including the Backbreeze `}<inlineCode parentName=\"p\">{`_config.scss`}</inlineCode>{` file (see `}<a parentName=\"p\" {...{\n        \"href\": \"/installation/#including-in-your-project\"\n      }}>{`installation`}</a>{`).`}</p>\n    <p>{`Backbreeze configuration variables are categorized in:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"#general-variables\"\n          }}>{`General`}</a></strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"#property-driven-variables\"\n          }}>{`Property-driven`}</a></strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"#internal-variables\"\n          }}>{`Internal`}</a></strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"general-variables\"\n    }}>{`General variables`}</h2>\n    <p>{`General variables are used to define values for multiple properties. It is recommended to customize these for every project.`}</p>\n    <h3 {...{\n      \"id\": \"bb-namespace\"\n    }}><inlineCode parentName=\"h3\">{`$bb-namespace`}</inlineCode></h3>\n    <p>{`Type `}<inlineCode parentName=\"p\">{`<String>`}</inlineCode>{`. Namespace generated class names, it defaults to an empty string, that means classes are not namespaced by default. In case you want to use Backbreeze with another library or just want to make clear what classes are utility classes you can set a namespace to prevent naming collisions.`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-namespace: '' !default;\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-namespace: 'bb';\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`- .ta-center {\n+ .bb-ta-center {\n    text-align: center;\n  }\n`}</code></pre>\n    <p>{`Example: setting `}<inlineCode parentName=\"p\">{`$bb-namespace: 'bb-';`}</inlineCode>{` will make all classes look like this: `}<inlineCode parentName=\"p\">{`.bb-<REST OF THE CLASS>`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`.-bb-<REST OF THE CLASS>`}</inlineCode>{`) for negative classes.`}</p>\n    <h3 {...{\n      \"id\": \"bb-bps\"\n    }}><inlineCode parentName=\"h3\">{`$bb-bps`}</inlineCode></h3>\n    <p>{`Map of breakpoints. The keys will be used in the responsive class names. Used in: all classes that are responsive.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-bps: (\n  'xs': 416px,\n  'sm': 756px,\n  'md': 1024px,\n  'lg': 1220px,\n  'xl': 1460px,\n) !default;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-spacing\"\n    }}><inlineCode parentName=\"h3\">{`$bb-spacing`}</inlineCode></h3>\n    <p>{`Defines spacing. Used in: `}<inlineCode parentName=\"p\">{`padding`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`margin`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`bottom`}</inlineCode>{`.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-spacing: (\n  '1': 1px,\n  '2': 2px,\n  '3': 3px,\n  '4': 4px,\n  '': 26px,\n) !default;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-sizes\"\n    }}><inlineCode parentName=\"h3\">{`$bb-sizes`}</inlineCode></h3>\n    <p>{`Defines sizes. Used in: `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`min-height`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`flex-basis`}</inlineCode>{`.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-sizes: (\n  '1': 1px,\n  '2': 2px,\n  '3': 3px,\n  '4': 4px,\n  '': 26px,\n) !default;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-colors\"\n    }}><inlineCode parentName=\"h3\">{`$bb-colors`}</inlineCode></h3>\n    <p>{`Defines colors. Used in: `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`border-color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`outline-color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode></p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'current': currentColor,\n) !default;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"property-driven-variables\"\n    }}>{`Property-driven variables`}</h2>\n    <p>{`Each CSS property class has two configuration variables, one that holds the property's `}<a parentName=\"p\" {...{\n        \"href\": \"#values\"\n      }}><strong parentName=\"a\">{`values`}</strong></a>{`, and one that holds `}<a parentName=\"p\" {...{\n        \"href\": \"#configuration\"\n      }}><strong parentName=\"a\">{`configuration`}</strong></a>{` for that property (e.g. name, breakpoints, pseudo states), both variables are Sass maps.`}</p>\n    <p>{`All variables have the same pattern:`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-<PROPERTYNAME>-values: (\n  /* values */\n);\n\n$bb-<PROPERTYNAME>-config: (\n  /* configuration */\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <p>{`Example:`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-text-align-values: (\n  /* values */\n);\n\n$bb-text-align-config: (\n  /* configuration */\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <h3 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h3>\n    <p>{`The values variable follow a simple key value pattern where the key will be the name for the value that is used in the resulting utility class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-text-align-values: (\n  'c': center,\n);\n\n// will yield:\n\n.ta-c {\n  text-align: center;\n}\n`}</code></pre>\n    <p>{`If the variable is false or the map is empty no classes will be generated.`}</p>\n    <h4 {...{\n      \"id\": \"note-empty-map-keys\"\n    }}>{`NOTE: Empty map keys`}</h4>\n    <p>{`Using an empty map key will result in a class without a value reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$main-font-size: 18px;\n\n$bb-font-size-values: (\n  '': $main-font-size,\n  'lg': 22px,\n);\n`}</code></pre>\n    <p>{`Will yield:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.fs {\n  font-size: 18px;\n}\n\n.fs-lg {\n  font-size: 22px;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"note-using-special-characters-in-map-keys\"\n    }}>{`NOTE: Using special characters in map keys`}</h4>\n    <p>{`To have nice classes some of the default values use characters that need to be escaped in the generated CSS e.g.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"lh-1.5\">\n  <!-- ... -->\n</div>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.lh-1\\\\.5 {\n  line-height: 1.5;\n}\n`}</code></pre>\n    <p>{`Backbreeze will escape `}<inlineCode parentName=\"p\">{`.`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` automatically.`}</p>\n    <p>{`Other special characters will need to be escaped using `}<inlineCode parentName=\"p\">{`\\\\\\\\`}</inlineCode>{`:`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-line-height-values: (\n  '1.4': 1.4, // <= Automatically escaped\n  '2': 2,\n  '1\\\\\\\\*2': 2, // <= \\`*\\` needs to be escaped\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <h4 {...{\n      \"id\": \"note-negative-values\"\n    }}>{`NOTE Negative values`}</h4>\n    <p>{`Negative values are generated automatically for CSS properties to whom it is useful by default. These properties are defined in the internal variable `}<a parentName=\"p\" {...{\n        \"href\": \"#bb-negative-properties\"\n      }}><inlineCode parentName=\"a\">{`$bb-negative-properties`}</inlineCode></a>{`. Adding a positive value will also generate a negative counterpart:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-top-values: (\n  '10': 10px,\n);\n`}</code></pre>\n    <p>{`Will yield:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.top-10 {\n  top: 10px;\n}\n\n.-top-10 {\n  top: -10px;\n}\n`}</code></pre>\n    <p>{`Negative values / classes can also be generated by prefixing value keys with a dash (`}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`). Be aware that this pattern does not make the value automatically negative, you have to take care of that yourself. This feature is useful for non strictly numeric values like transforms.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-transform-values: (\n  '-50\\\\\\\\%': translate(-50%, -50%),\n  // ...,\n);\n`}</code></pre>\n    <p>{`Will yield`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.-tf-50\\\\% {\n  transform: translate(-50%, -50%);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h3>\n    <p>{`The configuration map has three mandatory keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'name'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` Defines the generated class name`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'prop'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` CSS property used`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'values'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` Values used, `}<strong parentName=\"li\">{`this should be the corresponding values variable`}</strong></li>\n    </ul>\n    <p>{`Optional keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'bps'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate a responsive utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-bps`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'pseudo'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate pseudo selector utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-pseudo`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'important'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Boolean>`}</inlineCode>{` If set the properties will be made `}<inlineCode parentName=\"li\">{`!important`}</inlineCode></li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'values': $bb-text-align-values,\n  'bps': $bb-mqs,\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"internal-variables\"\n    }}>{`Internal variables`}</h2>\n    <p>{`Internal variables that should not no customization.`}</p>\n    <h3 {...{\n      \"id\": \"bb-directional-properties\"\n    }}><inlineCode parentName=\"h3\">{`$bb-directional-properties`}</inlineCode></h3>\n    <p>{`Type `}<inlineCode parentName=\"p\">{`<List>`}</inlineCode>{`. List of CSS properties that have directional values (e.g. padding-left, margin-bottom).`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-directional-properties: (\n  'padding',\n  'margin',\n  'border',\n  'border-width',\n  'border-style',\n  'border-color',\n  'border-radius'\n) !default;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-negative-properties\"\n    }}><inlineCode parentName=\"h3\">{`$bb-negative-properties`}</inlineCode></h3>\n    <p>{`Type `}<inlineCode parentName=\"p\">{`<List>`}</inlineCode>{`. All values for the properties in this list will have a corresponding negative value (and corresponding class name) generated automatically.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-negative-properties: ('margin', 'top', 'left', 'bottom', 'right') !default;\n`}</code></pre>\n    <p>{`Negative classes are prefixed by a dash:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.-top-10 {\n  top: -10px;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-pseudo\"\n    }}><inlineCode parentName=\"h3\">{`$bb-pseudo`}</inlineCode></h3>\n    <p>{`Type `}<inlineCode parentName=\"p\">{`<List>`}</inlineCode>{`. Pseudo classes to generate for a given property.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-pseudo: ('hover', 'focus', 'active', 'group-hover') !default;\n`}</code></pre>\n    <p>{`Group hover is used to allow for nested elements that respond to hover interaction with its parent `}<inlineCode parentName=\"p\">{`.group`}</inlineCode>{` element:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<a class=\"group\">\n  <h3 class=\"c-primary:group-hover\">\n    Hovering the group will change the coolor of the text\n  </a>\n</a>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bb-overflow\"\n    }}><inlineCode parentName=\"h3\">{`$bb-overflow`}</inlineCode></h3>\n    <p>{`Type `}<inlineCode parentName=\"p\">{`<List>`}</inlineCode>{`. Overflow values used for the properties `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`overflow-x`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`overflow-y`}</inlineCode>{`.`}</p>\n    <p>{`Default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$bb-overflow: (\n  'hidden': hidden,\n  'visible': visible,\n  'scroll': scroll,\n  'auto': auto,\n) !default;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"recommended-configuration\"\n    }}>{`Recommended configuration`}</h2>\n    <p>{`The following variables will are the most likely to be customized for every project that uses Backbreeze:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _vars.scss\n\n// Breakpoints\n$bb-bps: (/* ... */);\n\n// Spacing\n$bb-spacing: (/* ... */);\n\n// Sizes\n$bb-sizes: (/* ... */);\n\n// Colors\n$bb-colors: (/* ... */);\n\n// Font Family\n$bb-font-family-values: (/* ... */);\n\n// Font Sizes\n$bb-font-size-values: (/* ... */);\n\n// Line height\n$bb-line-height-values: (/* ... */);\n`}</code></pre>\n    {\n      /* @TODO */\n    }\n    {\n      /* - Abstract vs. concrete (use values like 'large': 40px, vs. '20': 20px,) */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}