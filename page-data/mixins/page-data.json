{"componentChunkName":"component---src-templates-mixins-js","path":"/mixins/","result":{"data":{"allMixinsPage":{"edges":[{"node":{"name":"mixins","data":[{"mdx":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Backbreeze is not a mixin library and therefor only provides two mixins intended for public use.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"bb-utility-class\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bb-utility-class\"), \" mixin is used under the hood to create all of Backbrezze' utility classes. By default it takes a property configuration map as parameter (see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/configuration/#property-driven-variables\"\n  }), \"property-driven variables\"), \") but it can also take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@content\"), \" block to generate classes with multiple properties. This can be practical to generate custom utility classes for your project.\"), mdx(\"h3\", null, \"Usage with a property configuration map:\"), mdx(\"p\", null, \"Mandatory keys:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'name'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<String>\"), \" Defines the generated class name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'prop'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<String>\"), \" CSS property used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'values'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Map>\"), \" Property values where each map key maps to the value name used in the class name\")), mdx(\"p\", null, \"Optional keys:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'bps'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Map>\"), \" If set this will generate a responsive utility classes. Typically this will be set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$bb-bps\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'pseudo'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Map>\"), \" If set this will generate pseudo selector utility classes. Typically this will be set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$bb-pseudo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'important'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Boolean>\"), \" If set the properties will be made \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"!important\"))), mdx(\"h3\", null, \"Usage with a content block:\"), mdx(\"p\", null, \"Mandatory keys:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'name'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<String>\"), \" Defines the generated class name\")), mdx(\"p\", null, \"Optional keys:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'bps'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Map>\"), \" If set this will generate a responsive utility classes. Typically this will be set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$bb-bps\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"'pseudo'\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Map>\"), \" If set this will generate pseudo selector utility classes. Typically this will be set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$bb-pseudo\"))));\n}\n;\nMDXContent.isMDXComponent = true;","example":[{"type":"scss","code":"// _animation-utility.scss\n\n@include bb-utility-class(\n  (\n    'name': 'anim',\n    'prop': 'animation-name',\n    'values': (\n      'spin': spin,\n      'pulse': pulse,\n      'none': none,\n    ),\n    'bps': $bb-bps // <- Use the general breakpoints\n  )\n);","description":"Regular usage default"},{"type":"scss","code":"// _embed.scss\n\n.embed {\n  position: relative;\n\n  &::before {\n    content: '';\n    display: block;\n  }\n}\n\n@include bb-utility-class(\n  (\n    'name': 'embed-16\\\\:9',\n    'bps': $bb-bps,\n  )\n) {\n  &::before {\n    padding-bottom: 9 / 16 * 100%;\n  }\n}\n\n@include bb-utility-class(\n  (\n    'name': 'embed-4\\\\:3',\n    'bps': $bb-bps,\n  )\n) {\n  &::before {\n    padding-bottom: 3 / 4 * 100%;\n  }\n}","description":"Example with content block"},{"type":"html","code":"<div class=\"embed embed-4:3 embed-16:9@md\">\n  <iframe src=\"//example.com/video\" frameborder=\"0\"></iframe>\n  <!-- This embed will be 4:3 ration on mobile and 16:9 on larger screens -->\n</div>","description":"Usage"}],"parameter":[{"type":"Map","name":"config","description":"[Property driven configuration map](/configuration/#property-driven-variables)"}],"file":{"name":"_mixins.scss","path":"_mixins.scss"},"context":{"name":"bb-utility-class","type":"mixin","code":"\n  $has-content: content-exists();\n  @if $config {\n    $no-mq: (\n      '': false\n    );\n\n    $name: map-get($config, 'name');\n    $prop: map-get($config, 'prop');\n    $values: map-get($config, 'values');\n    $pseudo: map-get($config, 'pseudo');\n    $important: if(map-get($config, 'important'), ' !important', '');\n\n    $bps: map-get($config, 'bps');\n    $bps: if($bps, map-merge($no-mq, $bps), $no-mq);\n\n    $negative: if(index($bb-negative-properties, $prop), true, false);\n    $directional: if(index($bb-directional-properties, $prop), true, false);\n\n    @if $values and $name and $prop and not $has-content {\n      @each $bp-name, $bp in $bps {\n        @include bb-mq($bp) {\n          @include bb-utility-class-from-values(\n            $name,\n            $prop,\n            $values,\n            $negative,\n            $bp-name,\n            $directional,\n            $important\n          );\n\n          @if $pseudo {\n            @each $pseudo-class in $pseudo {\n              @include bb-utility-class-from-values(\n                $name,\n                $prop,\n                $values,\n                $negative,\n                $bp-name,\n                $directional,\n                $important,\n                $pseudo-class\n              );\n            }\n          }\n        }\n      }\n    }\n\n    @if $name and $has-content {\n      @each $bp-name, $bp in $bps {\n        @include bb-mq($bp) {\n          @include bb-utility-class-from-content($name, $bp-name, $important) {\n            @content;\n          }\n\n          @if $pseudo {\n            @each $pseudo-class in $pseudo {\n              @include bb-utility-class-from-content(\n                $name,\n                $bp-name,\n                $important,\n                $pseudo-class\n              ) {\n                @content;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"}},{"mdx":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"bb-mq\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$bb-mq\"), \" mixin is a convenience mixin that allows you to reference breakpoints defined in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/configuration/#bb-bps\"\n  }), \"global \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"$bb-mqs\"), \" variable\"), \" by name and thus avoid having to hardcode values or do string interpolation.\"), mdx(\"p\", null, \"As first parameter it accepts the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<String>\"), \" Will render a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"min-width\"), \" media query when matching a key in the global \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/configuration/#bb-bps\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"$bb-mqs\")), \" map matching the key's value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Strings>\"), \" Will render \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@media #{<String>}\"), \", useful for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"max-width\"), \" or other complex media queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Number>\"), \" Will render a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"min-width\"), \" media query\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Null | Boolean>\"), \" Will just render the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@content\"), \" block without a media query\")), mdx(\"p\", null, \"The second parameter allows to define the media type and is only used when a string matching \", \"[\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$bb-mqs\"), \"]\", \" map key or a number is passed.\"));\n}\n;\nMDXContent.isMDXComponent = true;","example":[{"type":"scss","code":"// _config.scss\n$bb-mqs: (\n  'sm': 400px,\n  'lg': 900px,\n);\n\n// _my-custom-module.scss\n.my-module {\n  color: red;\n\n  @include bb-mq(false) {\n    font-size: 30px;\n  }\n\n  @include bb-mq('sm') {\n    color: purple;\n  }\n\n  @include bb-mq(600px) {\n    color: yellow;\n  }\n\n  @include bb-mq('lg', 'screen') {\n    color: blue;\n  }\n\n  @include bb-mq('screen and (max-width: #{map-get($bb-mqs, ' sm ') - 1px})') {\n    font-size: 22px;\n  }\n\n  @include bb-mq('print') {\n    color: black;\n  }\n}","description":"Example"},{"type":"css","code":".my-module {\n  color: red;\n  font-size: 30px;\n}\n\n@media all and (min-width: 400px) {\n  .my-module {\n    color: purple;\n  }\n}\n\n@media all and (min-width: 600px) {\n  .my-module {\n    color: yellow;\n  }\n}\n\n@media screen and (min-width: 900px) {\n  .my-module {\n    color: green;\n  }\n}\n\n@media screen and (max-width: 399px) {\n  .my-module {\n    font-size: 22px;\n  }\n}\n\n@media print {\n  .my-module {\n    color: black;\n  }\n}","description":"Result"}],"parameter":[{"type":"String | Number | Null | Boolean","name":"mq","description":"String matching a key from `$bb-mqs`, number for `min-width` media query, Arbitrary string for `@media` + string, `null` of `false` for no media query"},{"type":"String","name":"media","description":"Media type"}],"file":{"name":"_mixins.scss","path":"_mixins.scss"},"context":{"name":"bb-mq","type":"mixin","code":"\n  @if type-of($mq) == 'number' {\n    @media #{$media} and (min-width: #{$mq}) {\n      @content;\n    }\n  } @else if type-of($mq) == 'string' {\n    $general-mq: map-get($bb-bps, $mq);\n    @if $general-mq {\n      @media #{$media} and (min-width: #{$general-mq}) {\n        @content;\n      }\n    } @else {\n      @media #{$mq} {\n        @content;\n      }\n    }\n  } @else {\n    @content;\n  }\n"}}],"group":"mixins"}}]}},"pageContext":{"slug":"mixins"}}}