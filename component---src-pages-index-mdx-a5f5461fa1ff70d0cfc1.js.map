{"version":3,"sources":["webpack:///./src/pages/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","children","title","isHome","subline","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,cAAC,IAAD,CAAWC,MAAM,yDAAyDC,QAAQ,EAAMC,QAAQ,wHACjGH,IAGU,SAASI,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACP,EAAD,iBAAeD,EAAiBQ,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,YADR,YAGA,wBACE,oBAAIC,WAAW,MAAf,cAAmC,iCAAGA,WAAW,MAAS,CACtD,KAAQ,2BADuB,QAAnC,2BAGA,oBAAIA,WAAW,MAAf,gHACA,oBAAIA,WAAW,MAAf,+CACA,oBAAIA,WAAW,MAAf,+BACA,oBAAIA,WAAW,MAAf,sEAA2F,oBAAIA,WAAW,MAAf,YAA3F,sBAEF,mBAAQ,CACN,GAAM,4BADR,6BAGA,kKACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6CAML,sIACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8EAML,uLACA,wBACE,oBAAIA,WAAW,MAAf,oBACA,oBAAIA,WAAW,MAAf,yBAA8C,iCAAGA,WAAW,MAAS,CACjE,KAAQ,0DADkC,uBAA9C,KAGA,oBAAIA,WAAW,MAAf,wCACA,oBAAIA,WAAW,MAAf,sEAEF,mBAAQ,CACN,GAAM,YADR,aAGA,uBAAG,iCAAGA,WAAW,KAAQ,CACrB,KAAQ,2BADT,QAAH,8HAEgJ,iCAAGA,WAAW,KAAQ,CAClK,KAAQ,wCADoI,sBAFhJ,mLAImN,iCAAGA,WAAW,KAAQ,CACrO,KAAQ,0BADuM,4BAJnN,KAOA,mBAAQ,CACN,GAAM,wBADR,eAEmB,iCAAGA,WAAW,MAAS,CACtC,KAAQ,6BADO,aAGnB,wDAAqC,iCAAGA,WAAW,KAAQ,CACvD,KAAQ,6BADyB,gBAArC,oGAGA,mBAAQ,CACN,GAAM,2BADR,4BAGA,wBACE,oBAAIA,WAAW,MAAf,mFACA,oBAAIA,WAAW,MAAf,2CACA,oBAAIA,WAAW,MAAf,4FAMNJ,EAAWK,gBAAiB","file":"component---src-pages-index-mdx-a5f5461fa1ff70d0cfc1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MdxLayout from 'components/mdx-layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <MdxLayout title=\"Backbreeze CSS a utility class library written in Sass\" isHome={true} subline=\"Backbreeze is a utility class library written in Sass. It provides classes that help you create custom designs fast.\">\n    {children}\n  </MdxLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Written in `}<a parentName=\"li\" {...{\n          \"href\": \"https://sass-lang.com/\"\n        }}>{`Sass`}</a>{`, configuration in Sass`}</li>\n      <li parentName=\"ul\">{`Project specific configuration instead of lots of defaults, designed to build project specific style systems`}</li>\n      <li parentName=\"ul\">{`Can be dropped in to existing Sass projects`}</li>\n      <li parentName=\"ul\">{`Responsive and mobile first`}</li>\n      <li parentName=\"ul\">{`Short class names derived from the CSS property they apply to make `}<em parentName=\"li\">{`guessing`}</em>{` class names easy`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"what-are-utility-classes\"\n    }}>{`What are utility classes?`}</h2>\n    <p>{`Utility classes are CSS classes that only apply one CSS property and value. The classname reflects what property and value are applied.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.ta-center {\n  text-align: center;\n}\n`}</code></pre>\n    <p>{`Styling is achieved by combining multiple classes in HTML rather then writing, and possibly repeating, CSS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"ta-center fs-30 lh-1.2 fw-bold\">\n  <!--  -->\n</div>\n`}</code></pre>\n    <p>{`Backbreeze provides classes for a lot of CSS properties in the spec. So that a lot can be achieved by combining classes. Some benefits of this approach are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Fast development`}</li>\n      <li parentName=\"ul\">{`Small CSS files (when `}<a parentName=\"li\" {...{\n          \"href\": \"/using-in-production/#remove-unused-css-with-purgecss\"\n        }}>{`processed correctly`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`No need to worry about naming things`}</li>\n      <li parentName=\"ul\">{`Flexibility to make exceptions / variations of componets any time`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"why-sass\"\n    }}>{`Why Sass?`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/\"\n      }}>{`Sass`}</a>{` is a widely used industry standard for authoring stylesheets. In contrast to combining different PostCSS plugins it has a `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation\"\n      }}>{`full language spec`}</a>{` that provides a solid authoring experience and makes it easy to port code between projects. PostCSS is great to process the generated CSS and its use is encouraged when using `}<a parentName=\"p\" {...{\n        \"href\": \"/using-in-production/\"\n      }}>{`Backbreeze in production`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"inspired-by-tailwind\"\n    }}>{`Inspired by `}<a parentName=\"h2\" {...{\n        \"href\": \"https://tailwindcss.com/\"\n      }}>{`Tailwind`}</a></h2>\n    <p>{`Backbreeze is inspired by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/\"\n      }}>{`Tailwind CSS`}</a>{` framework. It aims to be an alternative that you can drop into existing projects that use Sass.`}</p>\n    <h2 {...{\n      \"id\": \"who-is-this-library-for\"\n    }}>{`Who is this library for?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Developers that enjoy working with utility classes and appreciate the approach.`}</li>\n      <li parentName=\"ul\">{`Developers that like to work with Sass.`}</li>\n      <li parentName=\"ul\">{`Developers that what to start migrating existing Sass projects to use utility classes.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}