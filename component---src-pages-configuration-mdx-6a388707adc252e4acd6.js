(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{RSxu:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return s})),t.d(a,"default",(function(){return c}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var n=t("7ljp"),l=t("LmON");var s={},i={_frontmatter:s},r=function(e){var a=e.children;return Object(n.mdx)(l.a,{title:"Configuration",subline:"Create your own style system via configuration."},a)};function c(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(n.mdx)(r,Object.assign({},i,t,{components:a,mdxType:"MDXLayout"}),Object(n.mdx)("h2",{id:"sass-default-variables"},"Sass ",Object(n.mdx)("inlineCode",{parentName:"h2"},"!default")," variables"),Object(n.mdx)("p",null,"In Sass variables can be flagged as ",Object(n.mdx)("inlineCode",{parentName:"p"},"!default"),". That means that if another variable with the same name is defined in the scope of the project the ",Object(n.mdx)("inlineCode",{parentName:"p"},"!default")," variable will be overwritten (learn more about it ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"https://sass-lang.com/documentation/variables#default-values"}),"here"),")."),Object(n.mdx)("p",null,"Backbreeze's configuration API is based on this principle. To configure the values for a property class you need to overwrite it by creating a variable with the same name in your project:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// project config\n\n// This declaration will overwritte each instance\n// of the `!default` $bb-colors variable\n\n$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'primary': #006cd6,\n  'accent': #f8c326,\n  'danger': #cb2431,\n  'current': currentColor,\n);\n")),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// backbreeze config default\n\n// Default value\n\n$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'current': currentColor,\n) !default;\n")),Object(n.mdx)("p",null,"Due to the way default variables work in Sass you need to overwrite any Backbreeze variables ",Object(n.mdx)("strong",{parentName:"p"},"before")," including the Backbreeze ",Object(n.mdx)("inlineCode",{parentName:"p"},"_config.scss")," file (see ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"/installation/#including-in-your-project"}),"installation"),")."),Object(n.mdx)("p",null,"Backbreeze configuration variables are categorized in:"),Object(n.mdx)("ul",null,Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("strong",{parentName:"li"},Object(n.mdx)("a",Object.assign({parentName:"strong"},{href:"#property-driven-variables"}),"Property-driven"))),Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("strong",{parentName:"li"},Object(n.mdx)("a",Object.assign({parentName:"strong"},{href:"#general-variables"}),"General"))),Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("strong",{parentName:"li"},Object(n.mdx)("a",Object.assign({parentName:"strong"},{href:"#internal-variables"}),"Internal")))),Object(n.mdx)("h2",{id:"property-driven-variables"},"Property-driven variables"),Object(n.mdx)("p",null,"Each CSS property class has two configuration variables, one that holds the property's ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"#values"}),"values"),", and one that holds ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"#configuration"}),"configuration")," for that property (e.g. name, breakpoints, pseudo states), both variables are Sass maps."),Object(n.mdx)("p",null,"All variables have the same pattern:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-<PROPERTY_NAME>-values: (\n  /* values */\n);\n\n$bb-<PROPERTY_NAME>-config: (\n  /* configuration */\n);\n")),Object(n.mdx)("p",null,"Example:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-text-align-values: (\n  /* values */\n);\n\n$bb-text-align-config: (\n  /* configuration */\n);\n")),Object(n.mdx)("h3",{id:"values"},"Values"),Object(n.mdx)("p",null,"The values variable follow a simple key value pattern where the key will be the name for the value that is used in the resulting utility class:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-text-align-values: (\n  'c': center,\n);\n\n// will yield:\n\n.ta-c {\n  text-align: center;\n}\n")),Object(n.mdx)("p",null,"If the variable is false or the map is empty no classes will be generated."),Object(n.mdx)("h4",{id:"note-empty-map-keys"},"NOTE: Empty map keys"),Object(n.mdx)("p",null,"Using an empty map key will result in a class without a value reference."),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$main-font-size: 18px;\n\n$bb-font-size-values: (\n  '': $main-font-size,\n  'lg': 22px,\n);\n")),Object(n.mdx)("p",null,"Will yield:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".fs {\n  font-size: 18px;\n}\n\n.fs-lg {\n  font-size: 22px;\n}\n")),Object(n.mdx)("h4",{id:"note-using-special-characters-in-map-keys"},"NOTE: Using special characters in map keys"),Object(n.mdx)("p",null,"To have nice classes some of the default values use characters that need to be escaped in the generated CSS e.g.:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'<div class="lh-1.5">\n  \x3c!-- ... --\x3e\n</div>\n')),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".lh-1\\.5 {\n  line-height: 1.5;\n}\n")),Object(n.mdx)("p",null,"Backbreeze will escape ",Object(n.mdx)("inlineCode",{parentName:"p"},"."),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"/"),", and ",Object(n.mdx)("inlineCode",{parentName:"p"},"%")," automatically."),Object(n.mdx)("p",null,"Other special characters will need to be escaped using ",Object(n.mdx)("inlineCode",{parentName:"p"},"\\\\"),":"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-line-height-values: (\n  '1.4': 1.4, // <= Automatically escaped\n  '2': 2,\n  '1\\\\*2': 2, // <= `*` needs to be escaped\n);\n")),Object(n.mdx)("h4",{id:"note-negative-values"},"NOTE: Negative values"),Object(n.mdx)("p",null,"Negative values are generated automatically for CSS properties to whom it is useful by default. These properties are defined in the internal variable ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"#bb-negative-properties"}),Object(n.mdx)("inlineCode",{parentName:"a"},"$bb-negative-properties")),". Adding a positive value will also generate a negative counterpart:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-top-values: (\n  '10': 10px,\n);\n")),Object(n.mdx)("p",null,"Will yield:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".top-10 {\n  top: 10px;\n}\n\n.-top-10 {\n  top: -10px;\n}\n")),Object(n.mdx)("p",null,"Negative values / classes can also be generated by prefixing value keys with a dash (",Object(n.mdx)("inlineCode",{parentName:"p"},"-"),"). Be aware that this pattern does not make the value automatically negative, you have to take care of that yourself. This feature is useful for non strictly numeric values like transforms."),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-transform-values: (\n  '-50\\\\%': translate(-50%, -50%),\n  // ...,\n);\n")),Object(n.mdx)("p",null,"Will yield:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".-tf-50\\% {\n  transform: translate(-50%, -50%);\n}\n")),Object(n.mdx)("h3",{id:"configuration"},"Configuration"),Object(n.mdx)("p",null,"The configuration map has three mandatory keys:"),Object(n.mdx)("table",null,Object(n.mdx)("thead",{parentName:"table"},Object(n.mdx)("tr",{parentName:"thead"},Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Key name"),Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(n.mdx)("tbody",{parentName:"table"},Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'name'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<String>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"Defines the generated class name")),Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'prop'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<String>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"CSS property used")),Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'values'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<Map>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"Values used, ",Object(n.mdx)("strong",{parentName:"td"},"this should be the corresponding values variable"))))),Object(n.mdx)("p",null,"Optional keys:"),Object(n.mdx)("table",null,Object(n.mdx)("thead",{parentName:"table"},Object(n.mdx)("tr",{parentName:"thead"},Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Key name"),Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(n.mdx)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(n.mdx)("tbody",{parentName:"table"},Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'bps'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<Map>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"If set this will generate a responsive utility classes. Typically this will be set to ",Object(n.mdx)("a",Object.assign({parentName:"td"},{href:"#bb-bps"}),Object(n.mdx)("inlineCode",{parentName:"a"},"$bb-bps")))),Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'pseudo'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<Map>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"If set this will generate pseudo selector utility classes. Typically this will be set to ",Object(n.mdx)("a",Object.assign({parentName:"td"},{href:"#bb-pseudo"}),Object(n.mdx)("inlineCode",{parentName:"a"},"$bb-pseudo")))),Object(n.mdx)("tr",{parentName:"tbody"},Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"'important'")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.mdx)("inlineCode",{parentName:"td"},"<Boolean>")),Object(n.mdx)("td",Object.assign({parentName:"tr"},{align:null}),"If set the properties will be made ",Object(n.mdx)("inlineCode",{parentName:"td"},"!important"))))),Object(n.mdx)("p",null,"Example:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'values': $bb-text-align-values,\n  'bps': $bb-mqs,\n);\n")),Object(n.mdx)("h2",{id:"general-variables"},"General variables"),Object(n.mdx)("p",null,"General variables are used to define values for multiple properties. It is recommended to customize these for every project."),Object(n.mdx)("h3",{id:"bb-namespace"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-namespace")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<String>"),". Namespace generated class names, it defaults to an empty string, that means classes are not namespaced by default. In case you want to use Backbreeze with another library or just want to make clear what classes are utility classes you can set a namespace to prevent naming collisions."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-namespace: '' !default;\n")),Object(n.mdx)("p",null,"Example:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-namespace: 'bb';\n")),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-diff"}),"- .ta-center {\n+ .bb-ta-center {\n    text-align: center;\n  }\n")),Object(n.mdx)("p",null,"Setting ",Object(n.mdx)("inlineCode",{parentName:"p"},"$bb-namespace: 'bb-';")," will make all classes look like this: ",Object(n.mdx)("inlineCode",{parentName:"p"},".bb-<REST OF THE CLASS>")," (",Object(n.mdx)("inlineCode",{parentName:"p"},".-bb-<REST OF THE CLASS>"),") for negative classes."),Object(n.mdx)("h3",{id:"bb-bps"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-bps")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<Map>"),", the keys will be used in the responsive class names. Used in: all classes that are responsive."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-bps: (\n  'xs': 416px,\n  'sm': 756px,\n  'md': 1024px,\n  'lg': 1220px,\n  'xl': 1460px,\n) !default;\n")),Object(n.mdx)("h3",{id:"bb-spacing"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-spacing")),Object(n.mdx)("p",null,"Defines spacing. Used in: ",Object(n.mdx)("inlineCode",{parentName:"p"},"padding"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"margin"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"top"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"left"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"right"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"bottom"),"."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-spacing: (\n  '1': 1px,\n  '2': 2px,\n  '3': 3px,\n  '4': 4px,\n  '': 26px,\n) !default;\n")),Object(n.mdx)("h3",{id:"bb-sizes"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-sizes")),Object(n.mdx)("p",null,"Defines sizes. Used in: ",Object(n.mdx)("inlineCode",{parentName:"p"},"width"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"max-width"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"min-width"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"height"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"max-height"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"min-height"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"flex-basis"),"."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-sizes: (\n  '1': 1px,\n  '2': 2px,\n  '3': 3px,\n  '4': 4px,\n  '': 26px,\n) !default;\n")),Object(n.mdx)("h3",{id:"bb-colors"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-colors")),Object(n.mdx)("p",null,"Defines colors. Used in: ",Object(n.mdx)("inlineCode",{parentName:"p"},"background-color"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"border-color"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"color"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"outline-color"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"fill"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"stroke")),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-colors: (\n  'white': #fff,\n  'black': #000,\n  'current': currentColor,\n) !default;\n")),Object(n.mdx)("h2",{id:"internal-variables"},"Internal variables"),Object(n.mdx)("p",null,"Internal variables that should not no customization."),Object(n.mdx)("h3",{id:"bb-directional-properties"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-directional-properties")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<List>"),". List of CSS properties that have directional values (e.g. padding-left, margin-bottom)."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-directional-properties: (\n  'padding',\n  'margin',\n  'border',\n  'border-width',\n  'border-style',\n  'border-color',\n  'border-radius'\n) !default;\n")),Object(n.mdx)("h3",{id:"bb-negative-properties"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-negative-properties")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<List>"),". All values for the properties in this list will have a corresponding negative value (and corresponding class name) generated automatically."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-negative-properties: ('margin', 'top', 'left', 'bottom', 'right') !default;\n")),Object(n.mdx)("p",null,"Negative classes are prefixed by a dash:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".-top-10 {\n  top: -10px;\n}\n")),Object(n.mdx)("h3",{id:"bb-pseudo"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-pseudo")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<List>"),". Pseudo classes to generate for a given property."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-pseudo: ('hover', 'focus', 'active', 'group-hover') !default;\n")),Object(n.mdx)("p",null,"Group hover is used to allow for nested elements that respond to hover interaction with its parent ",Object(n.mdx)("inlineCode",{parentName:"p"},".group")," element:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-html"}),'<a class="group">\n  <h3 class="c-primary:group-hover">\n    Hovering the group will change the coolor of the text\n  </a>\n</a>\n')),Object(n.mdx)("h3",{id:"bb-overflow"},Object(n.mdx)("inlineCode",{parentName:"h3"},"$bb-overflow")),Object(n.mdx)("p",null,"Type ",Object(n.mdx)("inlineCode",{parentName:"p"},"<List>"),". Overflow values used for the properties ",Object(n.mdx)("inlineCode",{parentName:"p"},"overflow"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"overflow-x"),", ",Object(n.mdx)("inlineCode",{parentName:"p"},"overflow-y"),"."),Object(n.mdx)("p",null,"Default value:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"$bb-overflow: (\n  'hidden': hidden,\n  'visible': visible,\n  'scroll': scroll,\n  'auto': auto,\n) !default;\n")),Object(n.mdx)("h2",{id:"recommended-configuration"},"Recommended configuration"),Object(n.mdx)("p",null,"The following variables will are the most likely to be customized for every project that uses Backbreeze:"),Object(n.mdx)("pre",null,Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// _vars.scss\n\n// Breakpoints\n$bb-bps: (/* ... */);\n\n// Spacing\n$bb-spacing: (/* ... */);\n\n// Sizes\n$bb-sizes: (/* ... */);\n\n// Colors\n$bb-colors: (/* ... */);\n\n// Font Family\n$bb-font-family-values: (/* ... */);\n\n// Font Sizes\n$bb-font-size-values: (/* ... */);\n\n// Line height\n$bb-line-height-values: (/* ... */);\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-configuration-mdx-6a388707adc252e4acd6.js.map