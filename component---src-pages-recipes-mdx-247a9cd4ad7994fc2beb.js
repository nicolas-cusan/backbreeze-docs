(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{xoix:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return i})),a.d(n,"default",(function(){return c}));a("rzGZ"),a("Dq+y"),a("8npG"),a("Ggvi"),a("E5k/"),a("q1tI");var t=a("7ljp"),s=a("LmON");var i={},r={_frontmatter:i},l=function(e){var n=e.children;return Object(t.mdx)(s.a,{title:"Recipes",subline:"Usefull tips for working with Backbreeze"},n)};function c(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,["components"]);return Object(t.mdx)(l,Object.assign({},r,a,{components:n,mdxType:"MDXLayout"}),Object(t.mdx)("h2",{id:"overwrite-a-utility-class-name"},"Overwrite a utility class name"),Object(t.mdx)("p",null,"To overwrite a classname change the ",Object(t.mdx)("inlineCode",{parentName:"p"},"name")," key in the property config variable:"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'text-align', // <- Custom name here\n  'prop': 'text-align',\n  'bps': $bb-bps,\n  'values': $bb-text-align-values\n);\n")),Object(t.mdx)("p",null,"Will yield:"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"/* result shortend for brevity */\n\n.text-align-center {\n  text-align: center:\n}\n\n.text-align-left {\n  text-align: left:\n}\n\n/* ... */\n")),Object(t.mdx)("h2",{id:"use-custom-breakpoints-for-a-utility-class"},"Use custom breakpoints for a utility class."),Object(t.mdx)("p",null,"To use custom breakpoints pass a custom breakpoint map to the ",Object(t.mdx)("inlineCode",{parentName:"p"},"bps")," key in the property config variable:"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'bps': (\n    'medium': 62em,\n    'large': 1600px,\n  ),\n  'values': $bb-text-align-values\n);\n")),Object(t.mdx)("p",null,"Will yield:"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),"/* result shortend for brevity */\n.ta-center {\n  /* ... */\n}\n\n@media all and (min-width: 62em) {\n  .ta-center\\@medium {\n    /* ... */\n  }\n}\n\n@media all and (min-width: 1600em) {\n  .ta-center\\@large {\n    /* ... */\n  }\n}\n\n/* ... */\n")),Object(t.mdx)("h3",{id:"add-a-breakpoint-to-the-existing-ones"},"Add a breakpoint to the existing ones."),Object(t.mdx)("p",null,"To just add a new breakpoint to a utility keeping the existing ones you will need to extend the default ",Object(t.mdx)("a",Object.assign({parentName:"p"},{href:"/configuration/#bb-bps"}),Object(t.mdx)("inlineCode",{parentName:"a"},"$bb-bps"))," variable using ",Object(t.mdx)("a",Object.assign({parentName:"p"},{href:"https://sass-lang.com/documentation/modules/map#merge"}),Object(t.mdx)("inlineCode",{parentName:"a"},"map-merge"))," (which is the Sass way of doing things!)."),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'bps': map-merge(\n    $bb-bps,\n    (\n      'xxl': 2600px\n    )\n  ),\n  'values': $bb-text-align-values\n);\n")),Object(t.mdx)("p",null,"Classes for all breakpoints in ",Object(t.mdx)("inlineCode",{parentName:"p"},"$bp-bps")," will be generated as well as a class for the ",Object(t.mdx)("inlineCode",{parentName:"p"},"xxl")," breakpoint."),Object(t.mdx)("p",null,"To customize the default breakpoints refer to the ",Object(t.mdx)("a",Object.assign({parentName:"p"},{href:"/configuration/#bb-bps"}),"configuration guide")),Object(t.mdx)("h3",{id:"creating-a-component-using-backbreeze-values"},"Creating a component using Backbreeze values"),Object(t.mdx)("p",null,"For complex structures it might be desirable to create a custom component. As Backbreeze is all Sass using values is fairly easy, you can use ",Object(t.mdx)("inlineCode",{parentName:"p"},"map-get")," to retrieve values from general or property value variables or, if the values are used very often, you can create global variables and use them in your components as well as use them in your Backbreeze configuration."),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// _container.scss\n\n@media all and #{map-get($bb-bps, 'sm')} {\n  .container {\n    max-width: map-get($bb-bps, 'sm');\n  }\n}\n")),Object(t.mdx)("p",null,"Or"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// _vars.scss\n\n$bp-xs: 416px;\n$bp-sm: 416px;\n\n$bb-bps: (\n  'xs': $bp-xs,\n  'sm': $bp-sm,\n);\n")),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// _container.scss\n\n@media all and #{$bp-xs} {\n  .container {\n    max-width: $bp-xs;\n  }\n}\n\n@media all and #{$bp-sm} {\n  .container {\n    max-width: $bp-sm;\n  }\n}\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-recipes-mdx-247a9cd4ad7994fc2beb.js.map