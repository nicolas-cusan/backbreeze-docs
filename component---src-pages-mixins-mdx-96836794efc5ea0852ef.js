(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"3Rq3":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return r}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var i=t("7ljp"),a=t("LmON");var l={},s={_frontmatter:l},m=function(e){var n=e.children;return Object(i.mdx)(a.a,{title:"Mixins",subline:"Backbreeze Sass mixins"},n)};function r(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(i.mdx)(m,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"Backbreeze is not a mixin library and therefor only provides two mixins intended for public use."),Object(i.mdx)("h2",{id:"bb-utility-class"},Object(i.mdx)("inlineCode",{parentName:"h2"},"bb-utility-class")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"bb-utility-class")," mixins is used under the hood to create all of Backbrezze' classes."),Object(i.mdx)("p",null,"It takes a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"$config")," argument of type ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Map>"),". The config map has some mandatory keys:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"'name'"),": ",Object(i.mdx)("inlineCode",{parentName:"li"},"<String>")," Defines the generated class name"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"'prop'"),": ",Object(i.mdx)("inlineCode",{parentName:"li"},"<String>")," CSS property used"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"'values'"),": ",Object(i.mdx)("inlineCode",{parentName:"li"},"<Map>")," Property values where each map key maps to the value name used in the class name")),Object(i.mdx)("p",null,"Optional keys:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"'bps'"),": ",Object(i.mdx)("inlineCode",{parentName:"li"},"<Map>")," If set this will generate a responsive utility classes. Typically this will be set to ",Object(i.mdx)("inlineCode",{parentName:"li"},"$bb-bps")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"'pseudo'"),": ",Object(i.mdx)("inlineCode",{parentName:"li"},"<Map>")," If set this will generate pseudo selector utility classes. Typically this will be set to ",Object(i.mdx)("inlineCode",{parentName:"li"},"$bb-pseudo"))),Object(i.mdx)("p",null,"You can use it to create your own utility classes:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// _animation-utility.scss\n\n@include bb-utility-class(\n  (\n    'name': 'anim',\n    'prop': 'animation-name',\n    'values': (\n      'spin': spin,\n      'pulse': pulse,\n      'none': none,\n    ),\n    'bps': $bb-bps // <- Use the general breakpoints,\n  )\n);\n")),Object(i.mdx)("p",null,"Will yield"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".anim-spin {\n  animation-name: spin;\n}\n\n.anim-pulse {\n  animation-name: pulse;\n}\n\n.anim-none {\n  animation-name: none;\n}\n\n/* + responsive versions (not shown for brevity) */\n")),Object(i.mdx)("h2",{id:"bb-mq"},Object(i.mdx)("inlineCode",{parentName:"h2"},"$bb-mq")))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-mixins-mdx-96836794efc5ea0852ef.js.map