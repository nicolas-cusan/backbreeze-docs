{"version":3,"sources":["webpack:///./src/pages/recipes.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","children","title","subline","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,cAAC,IAAD,CAAWC,MAAM,UAAUC,QAAQ,4CACpCF,IAGU,SAASG,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACN,EAAD,iBAAeD,EAAiBO,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,kCADR,kCAGA,8DAA2C,4BAAYC,WAAW,KAAvB,QAA3C,yCAIA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uMAcL,sCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAcL,mBAAQ,CACN,GAAM,8CADR,+CAGA,wFAAqE,4BAAYA,WAAW,KAAvB,OAArE,yCAIA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kNAiBL,sCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gQAqBL,mBAAQ,CACN,GAAM,yCADR,0CAGA,kIAA+G,iCAAGA,WAAW,KAAQ,CACjI,KAAQ,2BACP,4BAAYA,WAAW,KAAvB,YAFL,mBAEgF,iCAAGA,WAAW,KAAQ,CAClG,KAAQ,0DACP,4BAAYA,WAAW,KAAvB,cAJL,8CAQA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iOAmBL,yDAAsC,4BAAYA,WAAW,KAAvB,WAAtC,iDAA2I,4BAAYA,WAAW,KAAvB,OAA3I,gBACA,4EAAyD,iCAAGA,WAAW,KAAQ,CAC3E,KAAQ,2BAD6C,wBAGzD,mBAAQ,CACN,GAAM,gDADR,gDAGA,wKAAqJ,4BAAYA,WAAW,KAAvB,WAArJ,6NACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uIAUL,6BACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0GAYL,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sLAuCTJ,EAAWK,gBAAiB","file":"component---src-pages-recipes-mdx-ecc723ab43dec981fabc.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MdxLayout from 'components/mdx-layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <MdxLayout title=\"Recipes\" subline=\"Usefull tips for working with Backbreeze\">\n    {children}\n  </MdxLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"overwrite-a-utility-class-name\"\n    }}>{`Overwrite a utility class name`}</h2>\n    <p>{`To overwrite a classname change the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` key in the property config variable:`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'text-align', // <- Custom name here\n  'prop': 'text-align',\n  'bps': $bb-bps,\n  'values': $bb-text-align-values\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <p>{`Will yield:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* result shortend for brevity */\n\n.text-align-center {\n  text-align: center:\n}\n\n.text-align-left {\n  text-align: left:\n}\n\n/* ... */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-custom-breakpoints-for-a-utility-class\"\n    }}>{`Use custom breakpoints for a utility class.`}</h2>\n    <p>{`To use custom breakpoints pass a custom breakpoint map to the `}<inlineCode parentName=\"p\">{`bps`}</inlineCode>{` key in the property config variable:`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'bps': (\n    'medium': 62em,\n    'large': 1600px,\n  ),\n  'values': $bb-text-align-values\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <p>{`Will yield:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* result shortend for brevity */\n.ta-center {\n  /* ... */\n}\n\n@media all and (min-width: 62em) {\n  .ta-center\\\\@medium {\n    /* ... */\n  }\n}\n\n@media all and (min-width: 1600em) {\n  .ta-center\\\\@large {\n    /* ... */\n  }\n}\n\n/* ... */\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-a-breakpoint-to-the-existing-ones\"\n    }}>{`Add a breakpoint to the existing ones.`}</h3>\n    <p>{`To just add a new breakpoint to a utility keeping the existing ones you will need to extend the default `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/#bb-bps\"\n      }}><inlineCode parentName=\"a\">{`$bb-bps`}</inlineCode></a>{` variable using `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/modules/map#merge\"\n      }}><inlineCode parentName=\"a\">{`map-merge`}</inlineCode></a>{` (which is the Sass way of doing things!).`}</p>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// in your project variables file\n\n$bb-text-align-config: (\n  'name': 'ta',\n  'prop': 'text-align',\n  'bps': map-merge(\n    $bb-bps,\n    (\n      'xxl': 2600px\n    )\n  ),\n  'values': $bb-text-align-values\n);\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <p>{`Classes for all breakpoints in `}<inlineCode parentName=\"p\">{`$bp-bps`}</inlineCode>{` will be generated as well as a class for the `}<inlineCode parentName=\"p\">{`xxl`}</inlineCode>{` breakpoint.`}</p>\n    <p>{`To customize the default breakpoints refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/#bb-bps\"\n      }}>{`configuration guide`}</a></p>\n    <h3 {...{\n      \"id\": \"creating-a-component-using-backbreeze-values\"\n    }}>{`Creating a component using Backbreeze values`}</h3>\n    <p>{`For complex structures it might be desirable to create a custom component. As Backbreeze is all Sass using values is fairly easy, you can use `}<inlineCode parentName=\"p\">{`map-get`}</inlineCode>{` to retrieve values from general or property value variables or, if the values are used very often, you can create global variables and use them in your components as well as use them in your Backbreeze configuration.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _container.scss\n\n@media all and #{map-get($bb-bps, 'sm')} {\n  .container {\n    max-width: map-get($bb-bps, 'sm');\n  }\n}\n`}</code></pre>\n    <p>{`Or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _vars.scss\n\n$bp-xs: 416px;\n$bp-sm: 416px;\n\n$bb-bps: (\n  'xs': $bp-xs,\n  'sm': $bp-sm,\n);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _container.scss\n\n@media all and #{$bp-xs} {\n  .container {\n    max-width: $bp-xs;\n  }\n}\n\n@media all and #{$bp-sm} {\n  .container {\n    max-width: $bp-sm;\n  }\n}\n`}</code></pre>\n    {\n      /*\n      @TODO\n      - creating a component\n       - container\n       - button\n      */\n    }\n    {\n      /* ## Creating a custom utility class\n      - Buy in / Buy out (ho to incorportate & remove Backbreeze to an existing project)\n      There are two ways to create custom\n      - creating a custom utility\n       - eg. animation\n      - use values from general vars in my code / in combination with custom values\n      - print styles\n      - Pittfalls: order of configuration == order of class creation\n      - multi property utility classes */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}