{"version":3,"sources":["webpack:///./src/pages/mixins.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","children","title","subline","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,cAAC,IAAD,CAAWC,MAAM,SAASC,QAAQ,0BACnCF,IAGU,SAASG,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACN,EAAD,iBAAeD,EAAiBO,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,2HACA,mBAAQ,CACN,GAAM,oBACL,4BAAYC,WAAW,MAAvB,qBACH,8BAAW,4BAAYA,WAAW,KAAvB,oBAAX,kJAA0N,iCAAGA,WAAW,KAAQ,CAC5O,KAAQ,8CAD8M,6BAA1N,4BAEmE,4BAAYA,WAAW,KAAvB,YAFnE,mIAGA,mBAAQ,CACN,GAAM,2CADR,4CAGA,0CACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,UAApB,KAA6E,4BAAYA,WAAW,MAAvB,YAA7E,qCACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,UAApB,KAA6E,4BAAYA,WAAW,MAAvB,YAA7E,sBACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,KAA+E,4BAAYA,WAAW,MAAvB,SAA/E,sFAEF,yCACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,SAApB,KAA4E,4BAAYA,WAAW,MAAvB,SAA5E,0FAAyN,4BAAYA,WAAW,MAAvB,YACzN,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,KAA+E,4BAAYA,WAAW,MAAvB,SAA/E,6FAA+N,4BAAYA,WAAW,MAAvB,eAC/N,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,eAApB,KAAkF,4BAAYA,WAAW,MAAvB,aAAlF,uCAAgL,4BAAYA,WAAW,MAAvB,gBAElL,mBAAQ,CACN,GAAM,WADR,WAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oRAiBL,mBAAQ,CACN,GAAM,8BADR,+BAGA,0CACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,UAApB,KAA6E,4BAAYA,WAAW,MAAvB,YAA7E,sCAEF,yCACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,SAApB,KAA4E,4BAAYA,WAAW,MAAvB,SAA5E,0FAAyN,4BAAYA,WAAW,MAAvB,YACzN,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,KAA+E,4BAAYA,WAAW,MAAvB,SAA/E,6FAA+N,4BAAYA,WAAW,MAAvB,gBAEjO,mBAAQ,CACN,GAAM,aADR,WAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8aAmCL,iCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8MAOL,mBAAQ,CACN,GAAM,SACL,4BAAYA,WAAW,MAAvB,UACH,8BAAW,4BAAYA,WAAW,KAAvB,UAAX,yFAAuJ,iCAAGA,WAAW,KAAQ,CACzK,KAAQ,2BAD2I,UAEvI,4BAAYA,WAAW,KAAvB,WAFuI,aAAvJ,iFAGA,uEACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,kBAA4F,4BAAYA,WAAW,MAAvB,aAA5F,kDAAqM,iCAAGA,WAAW,MAAS,CACxN,KAAQ,2BACP,4BAAYA,WAAW,KAAvB,YAFL,iCAGA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,aAApB,gBAA2F,4BAAYA,WAAW,MAAvB,sBAA3F,gBAA2K,4BAAYA,WAAW,MAAvB,aAA3K,mCACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,kBAA4F,4BAAYA,WAAW,MAAvB,aAA5F,gBACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,oBAApB,yBAA2G,4BAAYA,WAAW,MAAvB,YAA3G,iCAEF,2HAAyG,4BAAYA,WAAW,KAAvB,WAAzG,uCACA,mBAAQ,CACN,GAAM,aADR,WAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wgBAqCL,kCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0cAyCTJ,EAAWK,gBAAiB","file":"component---src-pages-mixins-mdx-7c32c122b755fe214617.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MdxLayout from 'components/mdx-layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <MdxLayout title=\"Mixins\" subline=\"Backbreeze Sass mixins\">\n    {children}\n  </MdxLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Backbreeze is not a mixin library and therefor only provides two mixins intended for public use.`}</p>\n    <h2 {...{\n      \"id\": \"bb-utility-class\"\n    }}><inlineCode parentName=\"h2\">{`bb-utility-class`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`bb-utility-class`}</inlineCode>{` mixin is used under the hood to create all of Backbrezze' utility classes. By default it takes a property configuration map as parameter (see `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/#property-driven-variables\"\n      }}>{`property-driven variables`}</a>{`) but it can also take a `}<inlineCode parentName=\"p\">{`@content`}</inlineCode>{` block to generate classes with multiple properties. This can be practical to generate custom utility classes for your project.`}</p>\n    <h3 {...{\n      \"id\": \"usage-with-a-property-configuration-map\"\n    }}>{`Usage with a property configuration map:`}</h3>\n    <p>{`Mandatory keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'name'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` Defines the generated class name`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'prop'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` CSS property used`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'values'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` Property values where each map key maps to the value name used in the class name`}</li>\n    </ul>\n    <p>{`Optional keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'bps'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate a responsive utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-bps`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'pseudo'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate pseudo selector utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-pseudo`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'important'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Boolean>`}</inlineCode>{` If set the properties will be made `}<inlineCode parentName=\"li\">{`!important`}</inlineCode></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _animation-utility.scss\n\n@include bb-utility-class(\n  (\n    'name': 'anim',\n    'prop': 'animation-name',\n    'values': (\n      'spin': spin,\n      'pulse': pulse,\n      'none': none,\n    ),\n    'bps': $bb-bps // <- Use the general breakpoints,,,\n  )\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage-with-a-content-block\"\n    }}>{`Usage with a content block:`}</h3>\n    <p>{`Mandatory keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'name'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` Defines the generated class name`}</li>\n    </ul>\n    <p>{`Optional keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'bps'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate a responsive utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-bps`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'pseudo'`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Map>`}</inlineCode>{` If set this will generate pseudo selector utility classes. Typically this will be set to `}<inlineCode parentName=\"li\">{`$bb-pseudo`}</inlineCode></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _embed.scss\n\n.embed {\n  position: relative;\n\n  &::before {\n    content: '';\n    display: block;\n  }\n}\n\n@include bb-utility-class(\n  (\n    'name': 'embed-16\\\\\\\\:9',\n    'bps': $bb-bps,\n  )\n) {\n  &::before {\n    padding-bottom: 9 / 16 * 100%;\n  }\n}\n\n@include bb-utility-class(\n  (\n    'name': 'embed-4\\\\\\\\:3',\n    'bps': $bb-bps,\n  )\n) {\n  &::before {\n    padding-bottom: 3 / 4 * 100%;\n  }\n}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"embed embed-4:3 embed-16:9@md\">\n  <iframe src=\"//example.com/video\" frameborder=\"0\"></iframe>\n  <!-- This embed will be 4:3 ration on mobile and 16:9 on larger screens -->\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bb-mq\"\n    }}><inlineCode parentName=\"h2\">{`bb-mq`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`$bb-mq`}</inlineCode>{` mixin is a convenience mixin that allows you to reference breakpoints defined in the `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/#bb-bps\"\n      }}>{`global `}<inlineCode parentName=\"a\">{`$bb-mqs`}</inlineCode>{` variable`}</a>{` by name and thus avoid having to hardcode values or do string interpolation.`}</p>\n    <p>{`As first parameter it accepts the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<String>`}</inlineCode>{` Will render a `}<inlineCode parentName=\"li\">{`min-width`}</inlineCode>{` media query when matching a key in the global `}<a parentName=\"li\" {...{\n          \"href\": \"/configuration/#bb-bps\"\n        }}><inlineCode parentName=\"a\">{`$bb-mqs`}</inlineCode></a>{` map matching the key's value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<Strings>`}</inlineCode>{` Will render `}<inlineCode parentName=\"li\">{`@media #{<String>}`}</inlineCode>{`, useful for `}<inlineCode parentName=\"li\">{`max-width`}</inlineCode>{` or other complex media queries`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<Number>`}</inlineCode>{` Will render a `}<inlineCode parentName=\"li\">{`min-width`}</inlineCode>{` media query`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<Null | Boolean>`}</inlineCode>{` Will just render the `}<inlineCode parentName=\"li\">{`@content`}</inlineCode>{` block without a media query`}</li>\n    </ul>\n    <p>{`The second parameter allows to define the media type and is only used when a string matching `}{`[`}<inlineCode parentName=\"p\">{`$bb-mqs`}</inlineCode>{`]`}{` map key or a number is passed.`}</p>\n    <h4 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _config.scss\n$bb-mqs: (\n  'sm': 400px,\n  'lg': 900px,\n);\n\n// _my-custom-module.scss\n.my-module {\n  color: red;\n\n  @include bb-mq(false) {\n    font-size: 30px;\n  }\n\n  @include bb-mq('sm') {\n    color: purple;\n  }\n\n  @include bb-mq(600px) {\n    color: yellow;\n  }\n\n  @include bb-mq('lg', 'screen') {\n    color: blue;\n  }\n\n  @include bb-mq('screen and (max-width: #{map-get($bb-mqs, ' sm ') - 1px})') {\n    font-size: 22px;\n  }\n\n  @include bb-mq('print') {\n    color: black;\n  }\n}\n`}</code></pre>\n    <p>{`Result:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.my-module {\n  color: red;\n  font-size: 30px;\n}\n\n@media all and (min-width: 400px) {\n  .my-module {\n    color: purple;\n  }\n}\n\n@media all and (min-width: 600px) {\n  .my-module {\n    color: yellow;\n  }\n}\n\n@media screen and (min-width: 900px) {\n  .my-module {\n    color: green;\n  }\n}\n\n@media screen and (max-width: 399px) {\n  .my-module {\n    font-size: 22px;\n  }\n}\n\n@media print {\n  .my-module {\n    color: black;\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}